# To link a django docker container to a postgres service kubernetes, you need to follow these steps:

# Create a django docker image1 or use an existing one from the public registry.
# Create a django deployment that uses the image and sets the environment variables for connecting to postgres1.
# Create a django service that exposes the django port and allows external access1.
# Here is an example script that shows how to do this:


# In your django settings.py file, you can use DATABASE_HOST, DATABASE_NAME, DATABASE_USER and DATABASE_PASSWORD as the database parameters for connecting to postgres. For example:

# import os

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': os.environ.get('DATABASE_NAME'),
#         'USER': os.environ.get('DATABASE_USER'),
#         'PASSWORD': os.environ.get('DATABASE_PASSWORD'),
#         'HOST': os.environ.get('DATABASE_HOST'),
#     }
# }


# Django deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: django-deployment 
spec:
  selector:
    matchLabels:
      app: django 
      tier: frontend 
  replicas: 3 # scale up or down as needed 
  template:
    metadata:
      labels:
        app: django 
        tier: frontend 
    spec:
      containers:
      - image: your_django_image # use your own image here if you have one 
        name: django 
        env:
        - name :DATABASE_HOST  
          value :postgres-service   
        - name :DATABASE_NAME  
          valueFrom :
            configMapKeyRef :
              name :postgres-config   
              key :POSTGRES_DB   
        - name :DATABASE_USER  
          valueFrom :
            configMapKeyRef :
              name :postgres-config   
              key :POSTGRES_USER   
        - name :DATABASE_PASSWORD  
          valueFrom :
            configMapKeyRef :
              name :postgres-config   
              key :POSTGRES_PASSWORD   
        ports:
        - containerPort: 8000 # change this according to your app settings 
          name :django-port  

# Django service      
apiVersion :v1  
kind :Service  
metadata :
   name :django-service   
   labels :
     app :django   
spec :
   type: LoadBalancer # expose the service externally using a cloud provider's load balancer
   ports :
   - port :80 # map any port you want here
     targetPort :8000 # map this to your app's port
   selector :
     app :django   
     tier :frontend   
